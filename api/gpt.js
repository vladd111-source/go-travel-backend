import { OpenAI } from "openai";
import { createClient } from "@supabase/supabase-js";

// üîê Init API clients
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

// üîÅ –ß—Ç–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
async function readBody(req) {
  return new Promise((resolve, reject) => {
    let body = "";
    req.on("data", chunk => (body += chunk));
    req.on("end", () => resolve(body));
    req.on("error", reject);
  });
}

export default async function handler(req, res) {
  const allowedOrigin = "https://go-travel-frontend.vercel.app";

  // üîê CORS headers –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
  res.setHeader("Access-Control-Allow-Origin", allowedOrigin);
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  res.setHeader("Content-Type", "application/json");

  // üîÅ Preflight check
  if (req.method === "OPTIONS") {
    res.writeHead(204);
    res.end();
    return;
  }

  // ‚ùå –¢–æ–ª—å–∫–æ POST —Ä–∞–∑—Ä–µ—à—ë–Ω
  if (req.method !== "POST") {
    res.writeHead(405);
    res.end(JSON.stringify({ error: "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω" }));
    return;
  }

  try {
    const raw = await readBody(req);
    console.log("üì¶ RAW BODY:", raw);

    if (!raw?.trim()) {
      res.writeHead(400);
      res.end(JSON.stringify({ error: "–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞" }));
      return;
    }

    let payload;
    try {
      payload = JSON.parse(raw);
    } catch {
      res.writeHead(400);
      res.end(JSON.stringify({ error: "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON" }));
      return;
    }

    const { question, telegramId, mode } = payload;
    console.log("üß† GPT INPUT:", { question, telegramId, mode });

    if (!question || !telegramId) {
      res.writeHead(400);
      res.end(JSON.stringify({ error: "–í–æ–ø—Ä–æ—Å –∏–ª–∏ telegramId –Ω–µ —É–∫–∞–∑–∞–Ω" }));
      return;
    }

    // üîÅ GPT model selection
    const selectedModel = mode === "pro" ? "gpt-4" : "gpt-3.5-turbo";

    // üîÆ –ó–∞–ø—Ä–æ—Å –≤ OpenAI
    const chat = await openai.chat.completions.create({
      model: selectedModel,
      messages: [
        {
          role: "system",
          content:
            "–¢—ã ‚Äî —Ç—Ä–µ–≤–µ–ª-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Go Travel. –ü–∏—à–∏ –∂–∏–≤–æ, –∫–∞–∫ –º–µ—Å—Ç–Ω—ã–π –∂–∏—Ç–µ–ª—å. –î–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã, —ç–º–æ—Ü–∏–∏, –∫–æ—Ä–æ—Ç–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã."
        },
        { role: "user", content: question }
      ],
      temperature: 0.8,
      max_tokens: 400
    });

    const answer = chat.choices[0]?.message?.content || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.";

    console.log("üì¨ –û—Ç–≤–µ—Ç GPT:", answer);

    // üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Supabase
    await supabase.from("gpt_logs").insert({
      telegram_id: telegramId,
      question,
      answer,
      model: selectedModel,
      timestamp: new Date().toISOString()
    });

    res.writeHead(200);
    res.end(JSON.stringify({ answer }));
  } catch (err) {
    console.error("üî• GPT –û—à–∏–±–∫–∞:", err?.response?.data || err?.stack || err?.message || err);
    res.writeHead(500);
    res.end(JSON.stringify({ error: "–û—à–∏–±–∫–∞ ChatGPT" }));
  }
}
